### 开始训练模型并保存模型文件
import os
import pandas as pd
import joblib
from datetime import datetime
from sklearn.ensemble import RandomForestRegressor
import concurrent.futures
Xlistall = ['current_price', 'open_1_1', 'high_1_1', 'low_1_1', 'close_1_1', 'volume_1_1', 'count_1_1', 'taker_buy_volume_1_1', 'open_1_2', 'high_1_2', 'low_1_2', 'close_1_2', 'volume_1_2', 'count_1_2', 'taker_buy_volume_1_2', 'open_1_3', 'high_1_3', 'low_1_3', 'close_1_3', 'volume_1_3', 'count_1_3', 'taker_buy_volume_1_3', 'open_1_4', 'high_1_4', 'low_1_4', 'close_1_4', 'volume_1_4', 'count_1_4', 'taker_buy_volume_1_4', 'open_1_5', 'high_1_5', 'low_1_5', 'close_1_5', 'volume_1_5', 'count_1_5', 'taker_buy_volume_1_5', 'open_1_6', 'high_1_6', 'low_1_6', 'close_1_6', 'volume_1_6', 'count_1_6', 'taker_buy_volume_1_6', 'open_1_7', 'high_1_7', 'low_1_7', 'close_1_7', 'volume_1_7', 'count_1_7', 'taker_buy_volume_1_7', 'open_1_8', 'high_1_8', 'low_1_8', 'close_1_8', 'volume_1_8', 'count_1_8', 'taker_buy_volume_1_8', 'open_1_9', 'high_1_9', 'low_1_9', 'close_1_9', 'volume_1_9', 'count_1_9', 'taker_buy_volume_1_9', 'open_1_10', 'high_1_10', 'low_1_10', 'close_1_10', 'volume_1_10', 'count_1_10', 'taker_buy_volume_1_10', 'open_1_11', 'high_1_11', 'low_1_11', 'close_1_11', 'volume_1_11', 'count_1_11', 'taker_buy_volume_1_11', 'open_1_12', 'high_1_12', 'low_1_12', 'close_1_12', 'volume_1_12', 'count_1_12', 'taker_buy_volume_1_12', 'open_1_13', 'high_1_13', 'low_1_13', 'close_1_13', 'volume_1_13', 'count_1_13', 'taker_buy_volume_1_13', 'open_1_14', 'high_1_14', 'low_1_14', 'close_1_14', 'volume_1_14', 'count_1_14', 'taker_buy_volume_1_14', 'open_1_15', 'high_1_15', 'low_1_15', 'close_1_15', 'volume_1_15', 'count_1_15', 'taker_buy_volume_1_15', 'open_1_16', 'high_1_16', 'low_1_16', 'close_1_16', 'volume_1_16', 'count_1_16', 'taker_buy_volume_1_16', 'open_1_17', 'high_1_17', 'low_1_17', 'close_1_17', 'volume_1_17', 'count_1_17', 'taker_buy_volume_1_17', 'open_1_18', 'high_1_18', 'low_1_18', 'close_1_18', 'volume_1_18', 'count_1_18', 'taker_buy_volume_1_18', 'open_1_19', 'high_1_19', 'low_1_19', 'close_1_19', 'volume_1_19', 'count_1_19', 'taker_buy_volume_1_19', 'open_1_20', 'high_1_20', 'low_1_20', 'close_1_20', 'volume_1_20', 'count_1_20', 'taker_buy_volume_1_20', 'open_1_21', 'high_1_21', 'low_1_21', 'close_1_21', 'volume_1_21', 'count_1_21', 'taker_buy_volume_1_21', 'open_1_22', 'high_1_22', 'low_1_22', 'close_1_22', 'volume_1_22', 'count_1_22', 'taker_buy_volume_1_22', 'open_1_23', 'high_1_23', 'low_1_23', 'close_1_23', 'volume_1_23', 'count_1_23', 'taker_buy_volume_1_23', 'open_1_24', 'high_1_24', 'low_1_24', 'close_1_24', 'volume_1_24', 'count_1_24', 'taker_buy_volume_1_24', 'open_1_25', 'high_1_25', 'low_1_25', 'close_1_25', 'volume_1_25', 'count_1_25', 'taker_buy_volume_1_25', 'open_1_26', 'high_1_26', 'low_1_26', 'close_1_26', 'volume_1_26', 'count_1_26', 'taker_buy_volume_1_26', 'open_1_27', 'high_1_27', 'low_1_27', 'close_1_27', 'volume_1_27', 'count_1_27', 'taker_buy_volume_1_27', 'open_1_28', 'high_1_28', 'low_1_28', 'close_1_28', 'volume_1_28', 'count_1_28', 'taker_buy_volume_1_28', 'open_1_29', 'high_1_29', 'low_1_29', 'close_1_29', 'volume_1_29', 'count_1_29', 'taker_buy_volume_1_29', 'open_1_30', 'high_1_30', 'low_1_30', 'close_1_30', 'volume_1_30', 'count_1_30', 'taker_buy_volume_1_30', 'open_1_31', 'high_1_31', 'low_1_31', 'close_1_31', 'volume_1_31', 'count_1_31', 'taker_buy_volume_1_31', 'open_1_32', 'high_1_32', 'low_1_32', 'close_1_32', 'volume_1_32', 'count_1_32', 'taker_buy_volume_1_32', 'open_1_33', 'high_1_33', 'low_1_33', 'close_1_33', 'volume_1_33', 'count_1_33', 'taker_buy_volume_1_33', 'open_1_34', 'high_1_34', 'low_1_34', 'close_1_34', 'volume_1_34', 'count_1_34', 'taker_buy_volume_1_34', 'open_1_35', 'high_1_35', 'low_1_35', 'close_1_35', 'volume_1_35', 'count_1_35', 'taker_buy_volume_1_35', 'open_1_36', 'high_1_36', 'low_1_36', 'close_1_36', 'volume_1_36', 'count_1_36', 'taker_buy_volume_1_36', 'open_1_37', 'high_1_37', 'low_1_37', 'close_1_37', 'volume_1_37', 'count_1_37', 'taker_buy_volume_1_37', 'open_1_38', 'high_1_38', 'low_1_38', 'close_1_38', 'volume_1_38', 'count_1_38', 'taker_buy_volume_1_38', 'open_1_39', 'high_1_39', 'low_1_39', 'close_1_39', 'volume_1_39', 'count_1_39', 'taker_buy_volume_1_39', 'open_1_40', 'high_1_40', 'low_1_40', 'close_1_40', 'volume_1_40', 'count_1_40', 'taker_buy_volume_1_40', 'open_1_41', 'high_1_41', 'low_1_41', 'close_1_41', 'volume_1_41', 'count_1_41', 'taker_buy_volume_1_41', 'open_1_42', 'high_1_42', 'low_1_42', 'close_1_42', 'volume_1_42', 'count_1_42', 'taker_buy_volume_1_42', 'open_1_43', 'high_1_43', 'low_1_43', 'close_1_43', 'volume_1_43', 'count_1_43', 'taker_buy_volume_1_43', 'open_1_44', 'high_1_44', 'low_1_44', 'close_1_44', 'volume_1_44', 'count_1_44', 'taker_buy_volume_1_44', 'open_1_45', 'high_1_45', 'low_1_45', 'close_1_45', 'volume_1_45', 'count_1_45', 'taker_buy_volume_1_45', 'open_1_46', 'high_1_46', 'low_1_46', 'close_1_46', 'volume_1_46', 'count_1_46', 'taker_buy_volume_1_46', 'open_1_47', 'high_1_47', 'low_1_47', 'close_1_47', 'volume_1_47', 'count_1_47', 'taker_buy_volume_1_47', 'open_1_48', 'high_1_48', 'low_1_48', 'close_1_48', 'volume_1_48', 'count_1_48', 'taker_buy_volume_1_48', 'open_1_49', 'high_1_49', 'low_1_49', 'close_1_49', 'volume_1_49', 'count_1_49', 'taker_buy_volume_1_49', 'open_1_50', 'high_1_50', 'low_1_50', 'close_1_50', 'volume_1_50', 'count_1_50', 'taker_buy_volume_1_50', 'open_1_51', 'high_1_51', 'low_1_51', 'close_1_51', 'volume_1_51', 'count_1_51', 'taker_buy_volume_1_51', 'open_1_52', 'high_1_52', 'low_1_52', 'close_1_52', 'volume_1_52', 'count_1_52', 'taker_buy_volume_1_52', 'open_1_53', 'high_1_53', 'low_1_53', 'close_1_53', 'volume_1_53', 'count_1_53', 'taker_buy_volume_1_53', 'open_1_54', 'high_1_54', 'low_1_54', 'close_1_54', 'volume_1_54', 'count_1_54', 'taker_buy_volume_1_54', 'open_1_55', 'high_1_55', 'low_1_55', 'close_1_55', 'volume_1_55', 'count_1_55', 'taker_buy_volume_1_55', 'open_1_56', 'high_1_56', 'low_1_56', 'close_1_56', 'volume_1_56', 'count_1_56', 'taker_buy_volume_1_56', 'open_1_57', 'high_1_57', 'low_1_57', 'close_1_57', 'volume_1_57', 'count_1_57', 'taker_buy_volume_1_57', 'open_1_58', 'high_1_58', 'low_1_58', 'close_1_58', 'volume_1_58', 'count_1_58', 'taker_buy_volume_1_58', 'open_1_59', 'high_1_59', 'low_1_59', 'close_1_59', 'volume_1_59', 'count_1_59', 'taker_buy_volume_1_59', 'open_1_60', 'high_1_60', 'low_1_60', 'close_1_60', 'volume_1_60', 'count_1_60', 'taker_buy_volume_1_60', 'open_3_1', 'high_3_1', 'low_3_1', 'volume_3_1', 'count_3_1', 'taker_buy_volume_3_1', 'open_3_2', 'high_3_2', 'low_3_2', 'volume_3_2', 'count_3_2', 'taker_buy_volume_3_2', 'open_3_3', 'high_3_3', 'low_3_3', 'volume_3_3', 'count_3_3', 'taker_buy_volume_3_3', 'open_3_4', 'high_3_4', 'low_3_4', 'volume_3_4', 'count_3_4', 'taker_buy_volume_3_4', 'open_3_5', 'high_3_5', 'low_3_5', 'volume_3_5', 'count_3_5', 'taker_buy_volume_3_5', 'open_3_6', 'high_3_6', 'low_3_6', 'volume_3_6', 'count_3_6', 'taker_buy_volume_3_6', 'open_3_7', 'high_3_7', 'low_3_7', 'volume_3_7', 'count_3_7', 'taker_buy_volume_3_7', 'open_3_8', 'high_3_8', 'low_3_8', 'volume_3_8', 'count_3_8', 'taker_buy_volume_3_8', 'open_3_9', 'high_3_9', 'low_3_9', 'volume_3_9', 'count_3_9', 'taker_buy_volume_3_9', 'open_3_10', 'high_3_10', 'low_3_10', 'volume_3_10', 'count_3_10', 'taker_buy_volume_3_10', 'open_3_11', 'high_3_11', 'low_3_11', 'volume_3_11', 'count_3_11', 'taker_buy_volume_3_11', 'open_3_12', 'high_3_12', 'low_3_12', 'volume_3_12', 'count_3_12', 'taker_buy_volume_3_12', 'open_3_13', 'high_3_13', 'low_3_13', 'volume_3_13', 'count_3_13', 'taker_buy_volume_3_13', 'open_3_14', 'high_3_14', 'low_3_14', 'volume_3_14', 'count_3_14', 'taker_buy_volume_3_14', 'open_3_15', 'high_3_15', 'low_3_15', 'volume_3_15', 'count_3_15', 'taker_buy_volume_3_15', 'open_3_16', 'high_3_16', 'low_3_16', 'volume_3_16', 'count_3_16', 'taker_buy_volume_3_16', 'open_3_17', 'high_3_17', 'low_3_17', 'volume_3_17', 'count_3_17', 'taker_buy_volume_3_17', 'open_3_18', 'high_3_18', 'low_3_18', 'volume_3_18', 'count_3_18', 'taker_buy_volume_3_18', 'open_3_19', 'high_3_19', 'low_3_19', 'volume_3_19', 'count_3_19', 'taker_buy_volume_3_19', 'open_3_20', 'high_3_20', 'low_3_20', 'volume_3_20', 'count_3_20', 'taker_buy_volume_3_20', 'open_3_21', 'high_3_21', 'low_3_21', 'volume_3_21', 'count_3_21', 'taker_buy_volume_3_21', 'open_3_22', 'high_3_22', 'low_3_22', 'volume_3_22', 'count_3_22', 'taker_buy_volume_3_22', 'open_3_23', 'high_3_23', 'low_3_23', 'volume_3_23', 'count_3_23', 'taker_buy_volume_3_23', 'open_3_24', 'high_3_24', 'low_3_24', 'volume_3_24', 'count_3_24', 'taker_buy_volume_3_24', 'open_3_25', 'high_3_25', 'low_3_25', 'volume_3_25', 'count_3_25', 'taker_buy_volume_3_25', 'open_3_26', 'high_3_26', 'low_3_26', 'volume_3_26', 'count_3_26', 'taker_buy_volume_3_26', 'open_3_27', 'high_3_27', 'low_3_27', 'volume_3_27', 'count_3_27', 'taker_buy_volume_3_27', 'open_3_28', 'high_3_28', 'low_3_28', 'volume_3_28', 'count_3_28', 'taker_buy_volume_3_28', 'open_3_29', 'high_3_29', 'low_3_29', 'volume_3_29', 'count_3_29', 'taker_buy_volume_3_29', 'open_3_30', 'high_3_30', 'low_3_30', 'volume_3_30', 'count_3_30', 'taker_buy_volume_3_30', 'open_3_31', 'high_3_31', 'low_3_31', 'volume_3_31', 'count_3_31', 'taker_buy_volume_3_31', 'open_3_32', 'high_3_32', 'low_3_32', 'volume_3_32', 'count_3_32', 'taker_buy_volume_3_32', 'open_3_33', 'high_3_33', 'low_3_33', 'volume_3_33', 'count_3_33', 'taker_buy_volume_3_33', 'open_3_34', 'high_3_34', 'low_3_34', 'volume_3_34', 'count_3_34', 'taker_buy_volume_3_34', 'open_3_35', 'high_3_35', 'low_3_35', 'volume_3_35', 'count_3_35', 'taker_buy_volume_3_35', 'open_3_36', 'high_3_36', 'low_3_36', 'volume_3_36', 'count_3_36', 'taker_buy_volume_3_36', 'open_3_37', 'high_3_37', 'low_3_37', 'volume_3_37', 'count_3_37', 'taker_buy_volume_3_37', 'open_3_38', 'high_3_38', 'low_3_38', 'volume_3_38', 'count_3_38', 'taker_buy_volume_3_38', 'open_3_39', 'high_3_39', 'low_3_39', 'volume_3_39', 'count_3_39', 'taker_buy_volume_3_39', 'open_3_40', 'high_3_40', 'low_3_40', 'volume_3_40', 'count_3_40', 'taker_buy_volume_3_40', 'open_3_41', 'high_3_41', 'low_3_41', 'volume_3_41', 'count_3_41', 'taker_buy_volume_3_41', 'open_3_42', 'high_3_42', 'low_3_42', 'volume_3_42', 'count_3_42', 'taker_buy_volume_3_42', 'open_3_43', 'high_3_43', 'low_3_43', 'volume_3_43', 'count_3_43', 'taker_buy_volume_3_43', 'open_3_44', 'high_3_44', 'low_3_44', 'volume_3_44', 'count_3_44', 'taker_buy_volume_3_44', 'open_3_45', 'high_3_45', 'low_3_45', 'volume_3_45', 'count_3_45', 'taker_buy_volume_3_45', 'open_3_46', 'high_3_46', 'low_3_46', 'volume_3_46', 'count_3_46', 'taker_buy_volume_3_46', 'open_3_47', 'high_3_47', 'low_3_47', 'volume_3_47', 'count_3_47', 'taker_buy_volume_3_47', 'open_3_48', 'high_3_48', 'low_3_48', 'volume_3_48', 'count_3_48', 'taker_buy_volume_3_48', 'open_3_49', 'high_3_49', 'low_3_49', 'volume_3_49', 'count_3_49', 'taker_buy_volume_3_49', 'open_3_50', 'high_3_50', 'low_3_50', 'volume_3_50', 'count_3_50', 'taker_buy_volume_3_50', 'open_3_51', 'high_3_51', 'low_3_51', 'volume_3_51', 'count_3_51', 'taker_buy_volume_3_51', 'open_3_52', 'high_3_52', 'low_3_52', 'volume_3_52', 'count_3_52', 'taker_buy_volume_3_52', 'open_3_53', 'high_3_53', 'low_3_53', 'volume_3_53', 'count_3_53', 'taker_buy_volume_3_53', 'open_3_54', 'high_3_54', 'low_3_54', 'volume_3_54', 'count_3_54', 'taker_buy_volume_3_54', 'open_3_55', 'high_3_55', 'low_3_55', 'volume_3_55', 'count_3_55', 'taker_buy_volume_3_55', 'open_3_56', 'high_3_56', 'low_3_56', 'volume_3_56', 'count_3_56', 'taker_buy_volume_3_56', 'open_3_57', 'high_3_57', 'low_3_57', 'volume_3_57', 'count_3_57', 'taker_buy_volume_3_57', 'open_3_58', 'high_3_58', 'low_3_58', 'volume_3_58', 'count_3_58', 'taker_buy_volume_3_58', 'open_3_59', 'high_3_59', 'low_3_59', 'volume_3_59', 'count_3_59', 'taker_buy_volume_3_59', 'open_3_60', 'high_3_60', 'low_3_60', 'volume_3_60', 'count_3_60', 'taker_buy_volume_3_60', 'open_15_1', 'high_15_1', 'low_15_1', 'count_15_1', 'volume_15_1', 'taker_buy_volume_15_1', 'open_15_2', 'high_15_2', 'low_15_2', 'count_15_2', 'volume_15_2', 'taker_buy_volume_15_2', 'open_15_3', 'high_15_3', 'low_15_3', 'count_15_3', 'volume_15_3', 'taker_buy_volume_15_3', 'open_15_4', 'high_15_4', 'low_15_4', 'count_15_4', 'volume_15_4', 'taker_buy_volume_15_4', 'open_15_5', 'high_15_5', 'low_15_5', 'count_15_5', 'volume_15_5', 'taker_buy_volume_15_5', 'open_15_6', 'high_15_6', 'low_15_6', 'count_15_6', 'volume_15_6', 'taker_buy_volume_15_6', 'open_15_7', 'high_15_7', 'low_15_7', 'count_15_7', 'volume_15_7', 'taker_buy_volume_15_7', 'open_15_8', 'high_15_8', 'low_15_8', 'count_15_8', 'volume_15_8', 'taker_buy_volume_15_8', 'open_15_9', 'high_15_9', 'low_15_9', 'count_15_9', 'volume_15_9', 'taker_buy_volume_15_9', 'open_15_10', 'high_15_10', 'low_15_10', 'count_15_10', 'volume_15_10', 'taker_buy_volume_15_10', 'open_15_11', 'high_15_11', 'low_15_11', 'count_15_11', 'volume_15_11', 'taker_buy_volume_15_11', 'open_15_12', 'high_15_12', 'low_15_12', 'count_15_12', 'volume_15_12', 'taker_buy_volume_15_12', 'open_15_13', 'high_15_13', 'low_15_13', 'count_15_13', 'volume_15_13', 'taker_buy_volume_15_13', 'open_15_14', 'high_15_14', 'low_15_14', 'count_15_14', 'volume_15_14', 'taker_buy_volume_15_14', 'open_15_15', 'high_15_15', 'low_15_15', 'count_15_15', 'volume_15_15', 'taker_buy_volume_15_15', 'open_15_16', 'high_15_16', 'low_15_16', 'count_15_16', 'volume_15_16', 'taker_buy_volume_15_16', 'open_60_1', 'high_60_1', 'low_60_1', 'count_60_1', 'volume_60_1', 'taker_buy_volume_60_1', 'open_60_2', 'high_60_2', 'low_60_2', 'count_60_2', 'volume_60_2', 'taker_buy_volume_60_2', 'open_60_3', 'high_60_3', 'low_60_3', 'count_60_3', 'volume_60_3', 'taker_buy_volume_60_3', 'open_60_4', 'high_60_4', 'low_60_4', 'count_60_4', 'volume_60_4', 'taker_buy_volume_60_4', 'open_60_5', 'high_60_5', 'low_60_5', 'count_60_5', 'volume_60_5', 'taker_buy_volume_60_5', 'open_60_6', 'high_60_6', 'low_60_6', 'count_60_6', 'volume_60_6', 'taker_buy_volume_60_6', 'open_60_7', 'high_60_7', 'low_60_7', 'count_60_7', 'volume_60_7', 'taker_buy_volume_60_7', 'open_60_8', 'high_60_8', 'low_60_8', 'count_60_8', 'volume_60_8', 'taker_buy_volume_60_8', 'open_60_9', 'high_60_9', 'low_60_9', 'count_60_9', 'volume_60_9', 'taker_buy_volume_60_9', 'open_60_10', 'high_60_10', 'low_60_10', 'count_60_10', 'volume_60_10', 'taker_buy_volume_60_10', 'open_60_11', 'high_60_11', 'low_60_11', 'count_60_11', 'volume_60_11', 'taker_buy_volume_60_11', 'open_60_12', 'high_60_12', 'low_60_12', 'count_60_12', 'volume_60_12', 'taker_buy_volume_60_12', 'open_60_13', 'high_60_13', 'low_60_13', 'count_60_13', 'volume_60_13', 'taker_buy_volume_60_13', 'open_60_14', 'high_60_14', 'low_60_14', 'count_60_14', 'volume_60_14', 'taker_buy_volume_60_14', 'open_60_15', 'high_60_15', 'low_60_15', 'count_60_15', 'volume_60_15', 'taker_buy_volume_60_15', 'open_60_16', 'high_60_16', 'low_60_16', 'count_60_16', 'volume_60_16', 'taker_buy_volume_60_16', 'open_240_1', 'high_240_1', 'low_240_1', 'volume_240_1', 'open_240_2', 'high_240_2', 'low_240_2', 'volume_240_2', 'open_240_3', 'high_240_3', 'low_240_3', 'volume_240_3', 'open_240_4', 'high_240_4', 'low_240_4', 'volume_240_4', 'open_240_5', 'high_240_5', 'low_240_5', 'volume_240_5', 'open_240_6', 'high_240_6', 'low_240_6', 'volume_240_6', 'open_240_7', 'high_240_7', 'low_240_7', 'volume_240_7', 'open_240_8', 'high_240_8', 'low_240_8', 'volume_240_8', 'open_240_9', 'high_240_9', 'low_240_9', 'volume_240_9', 'open_240_10', 'high_240_10', 'low_240_10', 'volume_240_10', 'open_240_11', 'high_240_11', 'low_240_11', 'volume_240_11', 'open_240_12', 'high_240_12', 'low_240_12', 'volume_240_12', 'open_240_13', 'high_240_13', 'low_240_13', 'volume_240_13', 'open_240_14', 'high_240_14', 'low_240_14', 'volume_240_14', 'open_240_15', 'high_240_15', 'low_240_15', 'volume_240_15', 'open_240_16', 'high_240_16', 'low_240_16', 'volume_240_16', 'open_240_17', 'high_240_17', 'low_240_17', 'volume_240_17', 'open_240_18', 'high_240_18', 'low_240_18', 'volume_240_18', 'open_1440_1', 'high_1440_1', 'low_1440_1', 'open_1440_2', 'high_1440_2', 'low_1440_2', 'open_1440_3', 'high_1440_3', 'low_1440_3', 'open_1440_4', 'high_1440_4', 'low_1440_4', 'open_1440_5', 'high_1440_5', 'low_1440_5', 'open_1440_6', 'high_1440_6', 'low_1440_6', 'open_1440_7', 'high_1440_7', 'low_1440_7', 'open_1440_8', 'high_1440_8', 'low_1440_8', 'open_1440_9', 'high_1440_9', 'low_1440_9', 'open_1440_10', 'high_1440_10', 'low_1440_10', 'open_1440_11', 'high_1440_11', 'low_1440_11', 'open_1440_12', 'high_1440_12', 'low_1440_12', 'open_1440_13', 'high_1440_13', 'low_1440_13', 'open_1440_14', 'high_1440_14', 'low_1440_14', 'open_1440_15', 'high_1440_15', 'low_1440_15', 'open_1440_16', 'high_1440_16', 'low_1440_16', 'open_1440_17', 'high_1440_17', 'low_1440_17', 'open_1440_18', 'high_1440_18', 'low_1440_18', 'open_1440_19', 'high_1440_19', 'low_1440_19', 'open_1440_20', 'high_1440_20', 'low_1440_20', 'open_1440_21', 'high_1440_21', 'low_1440_21', 'open_1440_22', 'high_1440_22', 'low_1440_22', 'open_1440_23', 'high_1440_23', 'low_1440_23', 'open_1440_24', 'high_1440_24', 'low_1440_24', 'open_1440_25', 'high_1440_25', 'low_1440_25', 'open_1440_26', 'high_1440_26', 'low_1440_26', 'open_1440_27', 'high_1440_27', 'low_1440_27', 'open_1440_28', 'high_1440_28', 'low_1440_28', 'open_1440_29', 'high_1440_29', 'low_1440_29', 'open_1440_30', 'high_1440_30', 'low_1440_30', 'open_1440_31', 'high_1440_31', 'low_1440_31', 'open_1440_32', 'high_1440_32', 'low_1440_32']
Ylistall = ['open_y1_1', 'high_y1_1', 'low_y1_1', 'close_y1_1', 'open_y1_2', 'high_y1_2', 'low_y1_2', 'close_y1_2', 'open_y1_3', 'high_y1_3', 'low_y1_3', 'close_y1_3', 'open_y1_4', 'high_y1_4', 'low_y1_4', 'close_y1_4', 'open_y1_5', 'high_y1_5', 'low_y1_5', 'close_y1_5', 'high_y5', 'low_y5']
Xlistused = Xlistall[1:]

def remove_rows_with_inf_or_nan(X):
    # Fill NA values with a placeholder to avoid errors
    X_filled = X.fillna(value=pd.NA)
    # Check each row for presence of inf or NaN values
    mask = X_filled.isin([float('inf'), -float('inf')]).any(axis=1)
    # Get the values of 'base_time' column for rows with inf or NaN
    rows_with_inf_or_nan = X.loc[mask, 'base_time'].values
    # Remove rows with inf or NaN
    X_cleaned = X[~mask]
    return X_cleaned, rows_with_inf_or_nan

def train_and_save_model(X_input, y_input, file_prefix, index):
    print(f"Training model {index}...")
    X = X_input.copy()
    y = y_input.copy()
    rf_model = RandomForestRegressor(n_estimators=100, random_state=int(index))
    rf_model.fit(X, y)
    current_date = datetime.now().strftime('%Y-%m-%d')
    proj_dir = os.path.dirname(os.path.abspath(__file__))
    file_name = os.path.join(proj_dir, 'RFmodels', f'{file_prefix}_{index}_{current_date}.pkl')
    joblib.dump(rf_model, file_name)
    print(f"Model {index} trained and saved successfully.")
    return rf_model

def merge_and_save_models(models, file_prefix):
    print("Merging models...")
    merged_model = models[0]
    for model in models[1:]:
        merged_model.estimators_ += model.estimators_
    current_date = datetime.now().strftime('%Y-%m-%d')
    proj_dir = os.path.dirname(os.path.abspath(__file__))
    file_name = os.path.join(proj_dir, 'RFmodels', f'{file_prefix}_merged_{current_date}.pkl')
    joblib.dump(merged_model, file_name)
    print("Models merged and saved successfully.")

def MultiProcessFit_RF(X, y_data, model_name):
    print("Start fitting process...")
    # 创建进程池
    with concurrent.futures.ProcessPoolExecutor(max_workers=15) as executor:
        models = []
        for i in range(15):
            models.append(executor.submit(train_and_save_model, X, y_data, model_name, i))
        # 获取结果
        concurrent.futures.wait(models)

        # 提取结果
        models = [model.result() for model in models]

    # 合并模型
    merge_and_save_models(models, 'High')
    print("模型训练并保存完成。")

if __name__ == '__main__':
    '''    
    # 项目目录
    proj_dir = os.path.dirname(os.path.abspath(__file__))
    date = datetime.today().strftime("%m%d")
    df = pd.read_csv(os.path.join(proj_dir, 'fitdata', f'fitdata{date}all.csv'))
    # Call the function and output results
    df, rows_with_inf_or_nan = remove_rows_with_inf_or_nan(df)
    # Print the values of 'base_time' column for rows with inf or NaN
    print("Values of 'base_time' column for rows with inf or NaN:")
    print(rows_with_inf_or_nan)
    Xdata = df[Xlistused]

    # MultiProcessFit_RF(X=Xdata, y_data=df['high_y5'], model_name='High')
    MultiProcessFit_RF(X=Xdata, y_data=df['low_y5'], model_name='Low')
    MultiProcessFit_RF(X=Xdata, y_data=df['close_y1_5'], model_name='Close')
    '''
    models = []
    for i in range(15):
        models.append(joblib.load(f'RFmodels/High_{i}_2024-05-01.pkl'))
    merge_and_save_models(models,'High')


